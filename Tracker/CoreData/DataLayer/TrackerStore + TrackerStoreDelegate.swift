//
//  TrackerCategoryStore.swift
//  Tracker
//
//  Created by Viktor Zavhorodnii on 05/02/2025.
//

import CoreData
import UIKit

protocol TrackerStoreDelegate: AnyObject {
    func didUpdateTrackers()
}

final class TrackerStore: NSObject, NSFetchedResultsControllerDelegate {
    
    weak var delegate: TrackerStoreDelegate?
    private let context: NSManagedObjectContext
    
    private lazy var fetchedResultsController: NSFetchedResultsController<TrackerCoreData> = {
        let fetchRequest = NSFetchRequest<TrackerCoreData>(entityName: "TrackerCoreData")
        fetchRequest.sortDescriptors = [NSSortDescriptor(key: "title", ascending: true)]
        
        let frc = NSFetchedResultsController(
            fetchRequest: fetchRequest,
            managedObjectContext: context,
            sectionNameKeyPath: nil,
            cacheName: nil
        )
        frc.delegate = self
        return frc
    }()
    
    convenience override init() {
        let context = (UIApplication.shared.delegate as! AppDelegate).persistentContainer.viewContext
        self.init(context: context)
    }
    
    init(context: NSManagedObjectContext) {
        self.context = context
        super.init()
        do {
               try fetchedResultsController.performFetch()
               print("‚úÖ (init) NSFetchedResultsController –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
           } catch {
               print("‚ùå (init) –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ FRC: \(error.localizedDescription)")
           }
    }
    
    func controllerDidChangeContent(_ controller: NSFetchedResultsController<NSFetchRequestResult>) {
        delegate?.didUpdateTrackers()
    }
    
    func fetchTrackers() -> [Tracker] {
        guard let fetchedObjects = fetchedResultsController.fetchedObjects else {
            print("‚ùå (fetchTrackers) –û—à–∏–±–∫–∞: –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –≤ FRC!")
            return []
        }
        
        print("üõ† (fetchTrackers) –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç—Ä–µ–∫–µ—Ä–æ–≤ –∏–∑ Core Data: \(fetchedObjects.count)")

        return fetchedObjects.compactMap { coreDataObject in
            guard let id = coreDataObject.id,
                  let title = coreDataObject.title,
                  let color = coreDataObject.color,
                  let emoji = coreDataObject.emoji
            else {
                print("‚ö†Ô∏è (fetchTrackers) –ü—Ä–æ–ø—É—â–µ–Ω —Ç—Ä–µ–∫–µ—Ä –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                return nil
            }

            let scheduleData = coreDataObject.schedule as? Data ?? Data()
            let schedule = (try? JSONDecoder().decode([Weekday].self, from: scheduleData)) ?? []

            print("‚úÖ (fetchTrackers) –ó–∞–≥—Ä—É–∂–µ–Ω —Ç—Ä–µ–∫–µ—Ä: \(title), ID: \(id), –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: \(schedule)")

            return Tracker(id: id, title: title, color: color, emoji: emoji, schedule: schedule)
        }
    }
    
    func addTracker(_ tracker: Tracker) {
        let fetchRequest = NSFetchRequest<TrackerCategoryCoreData>(entityName: "TrackerCategoryCoreData")
        fetchRequest.predicate = NSPredicate(format: "title == %@", "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é")

        do {
            let fetchedCategories = try context.fetch(fetchRequest)

            let category: TrackerCategoryCoreData
            if let existingCategory = fetchedCategories.first {
                category = existingCategory
            } else {
                let newCategory = TrackerCategoryCoreData(context: context)
                newCategory.title = "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é"
                category = newCategory
            }

            let trackerToBeSaved = TrackerCoreData(context: context)
            trackerToBeSaved.id = tracker.id
            trackerToBeSaved.title = tracker.title
            trackerToBeSaved.color = tracker.color
            trackerToBeSaved.emoji = tracker.emoji
            
            // ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ schedule –≤—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ []
            trackerToBeSaved.schedule = try? JSONEncoder().encode(tracker.schedule.isEmpty ? [] : tracker.schedule)
            
            trackerToBeSaved.category = category // ‚úÖ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

            print("üõ† –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–µ—Ä '\(tracker.title)' –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '\(category.title ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")'")
            
            category.trackers = (category.trackers as? Set<TrackerCoreData> ?? []).union([trackerToBeSaved]) as NSSet
            
            saveContext()
            print("‚úÖ –¢—Ä–µ–∫–µ—Ä '\(tracker.title)' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–µ—Ä–∞: \(error.localizedDescription)")
        }
    }
    
    private func saveContext() {
        if context.hasChanges {
            do {
                try context.save()
            } catch {
                context.rollback()
            }
        }
    }
    
}
